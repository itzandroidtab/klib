name: klib library

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    strategy:
      matrix:
        cpu: [max32660, max32625, atsam3x8e, stm32f407, stm32h723, lpc1788, lpc1756, lpc802, tmpm373]

    steps:
      - uses: actions/checkout@v3

      - name: arm-none-eabi-gcc install
        uses: carlosperate/arm-none-eabi-gcc-action@v1.6.0
        with:
          release: '12.2.Rel1'

      - name: arm-none-eabi-gcc version
        run: arm-none-eabi-gcc --version

      - name: getting arm headers
        run: |
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/cachel1_armv7.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/cmsis_armcc.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/cmsis_armclang.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/cmsis_armclang_ltm.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/cmsis_compiler.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/cmsis_gcc.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/cmsis_iccarm.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/cmsis_version.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_armv81mml.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_armv8mbl.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_armv8mml.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm0.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm0plus.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm1.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm23.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm3.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm33.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm35p.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm4.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm55.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm7.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_sc000.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_sc300.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_starmc1.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/mpu_armv7.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/mpu_armv8.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/pmu_armv8.h -P ${{github.workspace}}/targets/arm/
          wget -q https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/tz_context.h -P ${{github.workspace}}/targets/arm/

      - name: generating header
        run: |
          mkdir -p ${{github.workspace}}/targets/${{matrix.cpu}}/docs
          wget -q -O ${{github.workspace}}/targets/${{matrix.cpu}}/docs/${{matrix.cpu}}.svd https://raw.githubusercontent.com/itzandroidtab/klib-svd/master/${{matrix.cpu}}.svd
          wget -q -O ${{github.workspace}}/svdconv.tbz2 https://github.com/Open-CMSIS-Pack/devtools/releases/download/tools%2Fsvdconv%2F3.3.44/svdconv-3.3.44-linux64-amd64.tbz2
          tar -xf ${{github.workspace}}/svdconv.tbz2 
          chmod +x ${{github.workspace}}/svdconv
          
          ${{github.workspace}}/svdconv ${{github.workspace}}/targets/${{matrix.cpu}}/docs/${{matrix.cpu}}.svd --generate=header -o ${{github.workspace}}/targets/${{matrix.cpu}}/ > /dev/null || true
          sed -i '/#include "system_/d' ${{github.workspace}}/targets/${{matrix.cpu}}/${{matrix.cpu}}.h

      - name: Create main
        # create a main file that includes all the header files for the current target
        run: |
          find ${{github.workspace}}/klib/ -type f -name "*.hpp" -exec echo "#include \"{}\"" >> ${{github.workspace}}/project/main.cpp \;
          find ${{github.workspace}}/targets/${{matrix.cpu}} -type f -name "*.hpp" -exec echo "#include \"{}\"" >> ${{github.workspace}}/project/main.cpp \;

          echo "int main() {return 0;}" >> ${{github.workspace}}/project/main.cpp

          echo "Contents of main:"
          cat ${{github.workspace}}/project/main.cpp
      
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: CC=arm-none-eabi-gcc CXX=arm-none-eabi-g++ cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DTARGET_CPU=${{matrix.cpu}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Uploading artifact
        uses: actions/upload-artifact@v3
        # upload the elf file as a artifact
        with:
          name: ${{matrix.cpu}}
          path: |
            ${{github.workspace}}/build/project/klib.elf
            ${{github.workspace}}/build/project/klib.map
            ${{github.workspace}}/build/project/klib.lss
            ${{github.workspace}}/build/project/klib.memory
            ${{github.workspace}}/build/project/klib.hex
            ${{github.workspace}}/build/project/klib.bin