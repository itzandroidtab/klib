name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: arm-none-eabi-gcc install
      uses: carlosperate/arm-none-eabi-gcc-action@v1.3.0

    - name: arm-none-eabi-gcc version
      run: arm-none-eabi-gcc --version

    - name: get svdconf
      run: wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Utilities/Linux64/SVDConv -q -O ${{github.workspace}}/targets/arm/SVDConf
      
    - name: get arm header files
      run: |
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/cachel1_armv7.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/cmsis_armcc.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/cmsis_armclang.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/cmsis_armclang_ltm.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/cmsis_compiler.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/cmsis_gcc.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/cmsis_iccarm.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/cmsis_version.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_armv81mml.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_armv8mbl.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_armv8mml.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm0.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm0plus.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm1.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm23.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm3.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm33.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm35p.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm4.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm55.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_cm7.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_sc000.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_sc300.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/core_starmc1.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/mpu_armv7.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/mpu_armv8.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/pmu_armv8.h -q -P ${{github.workspace}}/targets/arm/ && \
        wget https://github.com/ARM-software/CMSIS_5/raw/develop/CMSIS/Core/Include/tz_context.h -q -P ${{github.workspace}}/targets/arm/
      
    - name: get atsam3x8e svd
      run: wget https://github.com/posborne/cmsis-svd/raw/master/data/Atmel/ATSAM3X8E.svd -q -O ${{github.workspace}}/targets/atsam3x8e/ATSAM3X8E.svd
      
    - name: generate atsam3x8e cmsis header file with modified includes
      run: |
        chmod +x ${{github.workspace}}/targets/arm/SVDConf && \
        ${{github.workspace}}/targets/arm/SVDConf ${{github.workspace}}/targets/atsam3x8e/ATSAM3X8E.svd --generate=header --fields=struct --fields=macro --fields=enum -o ${{github.workspace}}/targets/atsam3x8e/ > /dev/null || true && \
        sed -i 's@#include "core_cm3.h"@#include "#include <targets/arm/core_cm3.h>"@g' ${{github.workspace}}/targets/atsam3x8e/ATSAM3X8E.h && \
        sed -i 's@#include "system_ATSAM3X8E.h"@#include "system_ATSAM3X8E.h"@g' ${{github.workspace}}/targets/atsam3x8e/ATSAM3X8E.h

    - name: Create main
      # for now create a main file to compile the libraries
      run: echo "int main() {return 0;}" >${{github.workspace}}/project/main.cpp

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: CC=arm-none-eabi-gcc CXX=arm-none-eabi-g++ cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
