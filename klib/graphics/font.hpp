#ifndef KLIB_FONT_HPP
#define KLIB_FONT_HPP

#include <cstdint>

#include "bitmap.hpp"

namespace klib::graphics {
    template <uint32_t Width, uint32_t Height>
    class font {
    public:
        constexpr static uint32_t width = Width;
        constexpr static uint32_t height = Height;

    public:
        /**
         * @brief Get a character from the font
         * 
         * @param ch 
         * @return mono_bitmap<width, height> 
         */
        constexpr mono_bitmap<width, height> get_character(const char ch) const;
    };

    /**
     * @brief Example 8x8 ascii font
     * 
     */
    class ascii_font_8x8: public font<8, 8> {
    public:
        constexpr static mono_bitmap<8, 8> characters[] = {
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // space
            {0x18, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x00}, // !
            {0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // "
            {0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00}, // #
            {0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00}, // $
            {0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00}, // %
            {0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00}, // &
            {0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00}, // '
            {0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00}, // (
            {0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00}, // )
            {0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00}, // *
            {0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00}, // +
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60}, // ,
            {0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00}, // -
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00}, // .
            {0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00}, // /
            {0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00}, // 0
            {0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00}, // 1
            {0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00}, // 2
            {0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00}, // 3
            {0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00}, // 4
            {0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00}, // 5
            {0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00}, // 6
            {0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00}, // 7
            {0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00}, // 8
            {0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00}, // 9
            {0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00}, // :
            {0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60}, // /
            {0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00}, // <
            {0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00}, // =
            {0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00}, // >
            {0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00}, // ?
            {0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00}, // @
            {0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00}, // A
            {0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00}, // B
            {0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00}, // C
            {0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00}, // D
            {0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00}, // E
            {0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00}, // F
            {0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00}, // G
            {0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00}, // H
            {0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00}, // I
            {0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00}, // J
            {0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00}, // K
            {0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00}, // L
            {0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00}, // M
            {0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00}, // N
            {0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00}, // O
            {0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00}, // P
            {0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00}, // Q
            {0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00}, // R
            {0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00}, // S
            {0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00}, // T
            {0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00}, // U
            {0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00}, // V
            {0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00}, // W
            {0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00}, // X
            {0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00}, // Y
            {0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00}, // Z
            {0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00}, // [
            {0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00}, // backslash
            {0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00}, // ]
            {0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00}, // ^
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff}, // _
            {0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00}, // `
            {0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00}, // a
            {0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00}, // b
            {0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00}, // c
            {0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00}, // d
            {0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00}, // e
            {0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00}, // f
            {0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8}, // g
            {0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00}, // h
            {0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00}, // i
            {0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78}, // j
            {0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00}, // k
            {0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00}, // l
            {0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00}, // m
            {0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00}, // n
            {0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00}, // o
            {0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0}, // p
            {0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e}, // q
            {0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00}, // r
            {0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00}, // s
            {0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00}, // t
            {0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00}, // u
            {0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00}, // v
            {0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00}, // w
            {0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00}, // x
            {0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8}, // y
            {0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00}, // z
            {0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00}, // {
            {0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00}, // |
            {0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00}, // }
            {0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // ~ 
        };

        /**
         * @brief Get a character from the font
         * 
         * @param ch 
         * @return mono_bitmap<width, height> 
         */
        constexpr mono_bitmap<8, 8> get_character(const char ch) const {
            if (ch > (' ' + sizeof(characters) / sizeof(characters[0])) || ch < ' ') {
                return characters[0];
            }

            return characters[ch - ' '];
        }
    };

    /**
     * @brief Example 8x8 ascii font
     * 
     */
    class ascii_font_16x16: public font<16, 16> {
    protected:
        /**
         * @brief Expand the lower nibble to 8 bits by 
         * duplicating every bit
         * 
         * @param value 
         * @return constexpr uint8_t 
         */
        constexpr static uint8_t expand(const uint8_t value) {
            uint8_t ret = 0;

            for (uint32_t i = 0; i < 4; i++) {
                ret >>= 2;

                const bool x = (value >> i) & 0x1;

                // update the return value
                ret |= (x ? 0b11 : 0b00) << 6;
            }

            return ret;
        }

        constexpr static mono_bitmap<16, 16> convert(const uint32_t index) {
            mono_bitmap<16, 16> ch;

            // get the character we want
            const auto& character = ascii_font_8x8::characters[index].data;

            for (uint32_t i = 0; i < sizeof(ascii_font_8x8::characters[0].data); i++) {
                // expand every single bit to 2 bits
                ch.data[(i * 4)] = expand(character[i] >> 4);
                ch.data[(i * 4) + 1] = expand(character[i] & 0xf);

                // copy it to the next line as well
                ch.data[(i * 4) + 2] = expand(character[i] >> 4);
                ch.data[(i * 4) + 3] = expand(character[i] & 0xf);
            }

            return ch;
        }

    public:
        /**
         * @brief Get a character from the font
         * 
         * @param ch 
         * @return mono_bitmap<width, height> 
         */
        constexpr mono_bitmap<16, 16> get_character(const char ch) const {
            if (ch > (' ' + sizeof(ascii_font_8x8::characters) / sizeof(ascii_font_8x8::characters[0])) || ch < ' ') {
                return convert(0);
            }

            return convert(ch - ' ');
        }
    };
}

#endif